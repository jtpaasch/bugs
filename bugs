#!venv/bin/python

import sys
import json
import tornado.ioloop
import tornado.gen
import tornado.httpclient
import tornado.web


class Utilities:
    """
    A class with some basic utilities.

    """

    @staticmethod
    def is_json(string):
        """
        Checks if the provided string is json.

        """

        try:
            json_object = json.loads(string)
        except ValueError:
            return False
        else:
            return True

    @staticmethod
    def parse_json(string):
        """
        Loads a JSON string and returns a Python Object.

        """

        try:
            json_object = json.loads(string)
        except ValueError:
            return None
        else:
            return json_object

    @staticmethod
    def parse_object_in_json(dictionary):
        if 'buffer' in dictionary:
            return '_io.BytesIO object'


class Bugs():
    """
    A class that can run a bunch of HTTP requests.

    """

    # A reference to a tornado IO Loop instance.
    ioloop = None

    # A reference to a tornado AsyncHTTPClient.
    client = None

    def __init__(self, ioloop, client):
        """
        This runs when the class is instantiated.

        """

        self.ioloop = ioloop
        self.client = client

    @property
    def active(self):
        """
        Is the client still active? 

        """

        return len(self.client.active) != 0

    @tornado.gen.engine
    def crawl(self, target):
        """
        Fetch the specified target.

        """

        # Is it JSON? Parse it and generate a request object with it.
        if Utilities.is_json(target):
            item = Utilities.parse_json(target)
            url = item['url']
            request = tornado.httpclient.HTTPRequest(**item)

        # If not, assume it's just a url.
        else:
            request = tornado.httpclient.HTTPRequest(target)

        # Fetch the item.
        response = yield self.client.fetch(request)

        # Process the response.
        self.on_response(response)

        # If the client is no longer active, 
        # we can stop the IO loop.
        if not self.active:
            self.ioloop.stop()


    def on_response(self, response):
        """
        This fires when the HTTP request returns a response.

        """

        # If there's an error, print it.
        if response.error:
            print "Error:", response.error

        # Otherwise, format the response and print it.
        else:
            print self.format_response(response)

            
    def format_response(self, response):
        """
        This formats the response object for output.

        """

        # Get all the values in the response.
        values = response.__dict__

        # Get the actual bytestream of the response.
        stream = values['buffer'].getvalue()

        # Get the original request object.
        request = values['request']

        # Overwrite some values.
        values['buffer'] = len(stream)
        values['request'] = (request.url, request.user_agent)

        # Format as json.
        output = json.dumps(values, indent=2)
        return output


def main():
    """
    The main entry point into the program.

    """

    # Get the command line arguments passed to this program.
    arguments = sys.argv

    # if no arguments, print a usage message. 
    if len(arguments) < 2:
        print "Usage: bugs url [url2] [url3] [...]"
        exit(1)

    # The targets we want to crawl are listed after 
    # the first argument (the first argument is the program's name).
    targets = arguments[1:]

    # Get an instance of the IO loop.
    ioloop = tornado.ioloop.IOLoop.instance()

    # Instantiate an HTTP client.
    client = tornado.httpclient.AsyncHTTPClient()

    # Get a Bugs instance.
    bugs = Bugs(ioloop, client)

    # Crawl each target.
    for target in targets:
        bugs.crawl(target)

    # Start the IO loop.
    ioloop.start()


# Execute the main() function if this is not imported as a module.
if __name__ == '__main__':
    main()
